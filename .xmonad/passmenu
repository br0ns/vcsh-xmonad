#!/usr/bin/env python
import os, sys, subprocess, re

# Based on script by Idolf, https://github.com/idolf

PASSWORD_ONLY = ' (password)'
USERNAME_ONLY = ' (username)'

def pass_list():
    passdir = os.path.expanduser('~/.password-store')
    for root, dirs, files in os.walk(passdir):
        for fname in files:
            if not fname.endswith('.gpg'):
                continue
            path = os.path.join(root, fname)
            yield os.path.relpath(path, passdir)[:-4]

def pass_get(entry):
    return subprocess.check_output(['pass', 'show', entry]).split('\n')[0]

def rofi_menu(opts, prompt = ''):
    # argv = ['rofi', '-dmenu', '-matching', 'fuzzy', '-p', prompt]
    argv = ['rofi', '-dmenu', '-p', prompt]
    p = subprocess.Popen(argv,
                         stdin = subprocess.PIPE,
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE,
                         )
    o, _e = p.communicate('\n'.join(opts))
    if not o:
        return None
    return o.strip()

def xdotool_string(string):
    subprocess.check_call(['xdotool', 'type', '--clearmodifiers', '--', string])

def xdotool_key(key):
    subprocess.check_call(['xdotool', 'key', '--clearmodifiers', key])

def enable_kbd(do_enable):
    cmd = 'enable' if do_enable else 'disable'
    o = subprocess.check_output(['xinput', 'list', '--short'])
    for line in o.splitlines():
        m = re.search(r'id=(\d+)\s+\[slave\s+keyboard', line)
        if not m:
            continue
        id = m.group(1)
        subprocess.call(['xinput', cmd, id],
                        stderr=file('/dev/null', 'w'))

def get_passwords_with_users():
    passwords = set()
    users = set()
    for fname in get_passwords():
        if fname.endswith('/user'):
            users.add(fname[:-5])
        else:
            passwords.add(fname)
    return users & passwords

def main():
    entries = list(pass_list())
    opts = []
    for entry in entries:
        if entry.endswith('/user') and entry[:-5] in entries:
            opts.append(entry[:-5] + PASSWORD_ONLY)
            opts.append(entry[:-5] + USERNAME_ONLY)
        elif entry + '/user' not in entries:
            opts.append(entry + PASSWORD_ONLY)
        elif entry.endswith('/filter') and entry[:-7] in entries:
            pass
        else:
            opts.append(entry)

    passwd = rofi_menu(sorted(opts))
    usernm = passwd + '/user'
    filter = passwd + '/filter'
    if passwd.endswith(PASSWORD_ONLY):
        passwd = passwd[:-len(PASSWORD_ONLY)]
    elif passwd.endswith(USERNAME_ONLY):
        passwd = passwd[:-len(USERNAME_ONLY)] + '/user'

    passwd = pass_get(passwd)
    usernm = pass_get(usernm) if usernm in entries else None
    filter = pass_get(filter) if filter in entries else None

    if filter:
      winname = subprocess.check_output(
        ['xdotool', 'getactivewindow', 'getwindowname'])
      if not re.search(filter, winname):
        print 'Window name "%s" does not match filter "%s"' % (winname, filter)
        return

    try:
        # Disable user input while we're typing
        enable_kbd(False)
        if usernm:
            xdotool_string(usernm + '\t' + passwd)
            xdotool_key('Return')
        else:
            xdotool_string(passwd)
    finally:
        # Re-enable user input no matter what happens
        enable_kbd(True)

if __name__ == '__main__':
    main()
